import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# --- Ti√™u ƒë·ªÅ Dashboard ---
st.set_page_config(page_title="Dashboard K·∫ø ho·∫°ch Mua V·∫≠t t∆∞", layout="wide")
st.title("üìä Dashboard K·∫ø ho·∫°ch Mua V·∫≠t t∆∞")

# --- Sidebar ƒë·ªÉ b·ªô l·ªçc ---
st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t")
@st.cache_data
def load_data(path):
    xls = pd.ExcelFile(path)
    return {
        "POH": xls.parse("PurchaseOrderHeader"),
        "POD": xls.parse("PurchaseOrderDetail"),
        "Vendor": xls.parse("Vendor"),
        "Ship": xls.parse("ShipMethod"),
        "PV": xls.parse("ProductVendor"),
        "WO": xls.parse("WorkOrder"),
        "WOR": xls.parse("WorkOrderRouting"),
        "TH": xls.parse("TransactionHistory")
    }

file_path = "CompanyX.xlsx"
try:
    data = load_data(file_path)
except FileNotFoundError:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y file CompanyX.xlsx. Vui l√≤ng ƒë·∫∑t trong c√πng th∆∞ m·ª•c.")
    st.stop()

# --- Chu·∫©n h√≥a ng√†y th√°ng ---
data["POH"]["OrderDate"] = pd.to_datetime(data["POH"]["OrderDate"])
data["POH"]["ShipDate"]  = pd.to_datetime(data["POH"]["ShipDate"])
data["POD"]["DueDate"]   = pd.to_datetime(data["POD"]["DueDate"])

# --- T√≠nh LateShipment ---
df = data["POD"].merge(
    data["POH"][["PurchaseOrderID","ShipDate","VendorID","ShipMethodID","SubTotal","TaxAmt","Freight","TotalDue"]],
    on="PurchaseOrderID", how="left"
)
df["LateShipment"] = (df["ShipDate"] > df["DueDate"]).astype(int)

# --- Merge b·ªï sung ---
df = df.merge(
    data["Vendor"][["BusinessEntityID","Name"]], left_on="VendorID", right_on="BusinessEntityID", how="left"
).rename(columns={"Name":"Nh√† cung c·∫•p"})
df = df.merge(
    data["Ship"][["ShipMethodID","Name"]], on="ShipMethodID", how="left"
).rename(columns={"Name":"Ph∆∞∆°ng th·ª©c giao"})
df = df.merge(
    data["PV"][["ProductID","BusinessEntityID","AverageLeadTime"]], 
    left_on=["ProductID","VendorID"], right_on=["ProductID","BusinessEntityID"], how="left"
)

# --- B·ªô l·ªçc ---
st.sidebar.subheader("üìã B·ªô l·ªçc")
vendors = st.sidebar.multiselect(
    "Ch·ªçn Nh√† cung c·∫•p", options=df["Nh√† cung c·∫•p"].unique(), 
    default=df["Nh√† cung c·∫•p"].unique()
)
dr = st.sidebar.date_input(
    "Ch·ªçn kho·∫£ng th·ªùi gian",
    [data["POH"]["OrderDate"].min(), data["POH"]["OrderDate"].max()]
)

mask = (
    df["Nh√† cung c·∫•p"].isin(vendors) &
    df["ShipDate"].between(pd.to_datetime(dr[0]), pd.to_datetime(dr[1]))
)
df_f = df[mask]
poh_f = data["POH"][
    data["POH"]["OrderDate"].between(pd.to_datetime(dr[0]), pd.to_datetime(dr[1]))
]

# --- KPI T·ªïng quan ---
st.header("üßÆ T·ªïng quan")
c1, c2, c3, c4 = st.columns(4)
c1.metric("üìù T·ªïng s·ªë ƒë∆°n h√†ng", f"{poh_f['PurchaseOrderID'].nunique():,}")
c2.metric("üí∞ T·ªïng chi ph√≠", f"${poh_f['TotalDue'].sum():,.2f}")
c3.metric("üè¢ S·ªë nh√† cung c·∫•p", f"{poh_f['VendorID'].nunique():,}")
c4.metric("üì¶ T·ªïng s·ªë l∆∞·ª£ng nh·∫≠n", f"{df_f['ReceivedQty'].sum():,.0f}")

st.markdown("---")

# --- Ph·∫ßn 1: Chi ph√≠ & ƒê∆°n h√†ng ---
st.subheader("üìà Xu h∆∞·ªõng Chi ph√≠ & ƒê∆°n h√†ng")

# 1. Xu h∆∞·ªõng t·ªïng chi ph√≠ theo th√°ng
cost_m = poh_f.groupby(poh_f["OrderDate"].dt.to_period("M"))["TotalDue"].sum().reset_index()
cost_m["OrderDate"] = cost_m["OrderDate"].astype(str)
fig1 = px.line(cost_m, x="OrderDate", y="TotalDue", markers=True)
fig1.update_layout(title="üí∞ Xu h∆∞·ªõng T·ªïng chi ph√≠ theo Th√°ng",
                   xaxis_title="Th√°ng", yaxis_title="T·ªïng chi ph√≠ ($)")
st.plotly_chart(fig1, use_container_width=True)
st.caption("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ª± thay ƒë·ªïi t·ªïng chi ph√≠ mua h√†ng qua c√°c th√°ng.")

# 2. S·ªë ƒë∆°n h√†ng theo th√°ng (heatmap)
orders_m = poh_f.groupby([poh_f["OrderDate"].dt.to_period("M"), "VendorID"])["PurchaseOrderID"]\
    .nunique().reset_index().rename(columns={"OrderDate":"Th√°ng","PurchaseOrderID":"S·ªë ƒë∆°n"})
heat = orders_m.pivot(index="VendorID", columns="Th√°ng", values="S·ªë ƒë∆°n").fillna(0)
fig_heat = go.Figure(data=go.Heatmap(
    z=heat.values, x=heat.columns.astype(str), y=heat.index,
    colorscale="Blues"
))
fig_heat.update_layout(title="üå°Ô∏è S·ªë ƒë∆°n h√†ng theo Nh√† cung c·∫•p & Th√°ng",
                       xaxis_title="Th√°ng", yaxis_title="VendorID")
st.plotly_chart(fig_heat, use_container_width=True)

st.markdown("---")

# --- Ph·∫ßn 2: Nh√† cung c·∫•p & Giao h√†ng ---
st.subheader("üöö Nh√† cung c·∫•p & Giao h√†ng")

# 3. Top 10 Vendor theo s·ªë ƒë∆°n
vc = df_f["Nh√† cung c·∫•p"].value_counts().nlargest(10).reset_index()
vc.columns = ["Nh√† cung c·∫•p","S·ªë ƒë∆°n"]
fig2 = px.bar(vc, x="S·ªë ƒë∆°n", y="Nh√† cung c·∫•p", orientation="h",
              title="üèÜ Top 10 Nh√† cung c·∫•p theo S·ªë ƒë∆°n")
fig2.update_layout(xaxis_title="S·ªë ƒë∆°n", yaxis_title="Nh√† cung c·∫•p")
st.plotly_chart(fig2, use_container_width=True)
st.caption("Nh√† cung c·∫•p c√≥ kh·ªëi l∆∞·ª£ng ƒë∆°n h√†ng cao nh·∫•t.")

# 4. T·ª∑ l·ªá ph∆∞∆°ng th·ª©c giao h√†ng
sc = df_f["Ph∆∞∆°ng th·ª©c giao"].value_counts().reset_index()
sc.columns = ["Ph∆∞∆°ng th·ª©c","S·ªë ƒë∆°n"]
fig3 = px.pie(sc, names="Ph∆∞∆°ng th·ª©c", values="S·ªë ƒë∆°n",
              title="üöõ Ph√¢n b·ªë Ph∆∞∆°ng th·ª©c Giao h√†ng")
st.plotly_chart(fig3, use_container_width=True)
st.caption("T·ª∑ l·ªá s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn kh√°c nhau.")

st.markdown("---")

# --- Ph·∫ßn 3: S·∫£n xu·∫•t ---
st.subheader("üè≠ Ph√¢n t√≠ch S·∫£n xu·∫•t")
r1, r2 = st.columns(2)

with r1:
    hrs = data["WOR"].groupby("ProductID")["ActualResourceHrs"].sum().reset_index()
    fig4 = px.bar(hrs, x="ProductID", y="ActualResourceHrs",
                  title="‚è±Ô∏è T·ªïng Gi·ªù S·∫£n xu·∫•t theo S·∫£n ph·∫©m")
    fig4.update_layout(xaxis_title="Product ID", yaxis_title="Gi·ªù")
    st.plotly_chart(fig4, use_container_width=True)
    st.caption("T·ªïng s·ªë gi·ªù t√†i nguy√™n s·ª≠ d·ª•ng cho m·ªói s·∫£n ph·∫©m.")

with r2:
    scrap = data["WO"].groupby("ProductID")["ScrappedQty"].sum().reset_index()
    fig5 = px.bar(scrap, x="ProductID", y="ScrappedQty",
                  title="üöÆ S·ªë l∆∞·ª£ng H√†ng h·ªèng theo S·∫£n ph·∫©m")
    fig5.update_layout(xaxis_title="Product ID", yaxis_title="S·ªë l∆∞·ª£ng h·ªèng")
    st.plotly_chart(fig5, use_container_width=True)
    st.caption("S·∫£n ph·∫©m n√†o c√≥ t·ª∑ l·ªá ph·∫ø ph·∫©m cao.")

st.markdown("---")

# --- Ph·∫ßn 4: Ch·∫•t l∆∞·ª£ng & R·ªßi ro ---
st.subheader("‚ùó Ch·∫•t l∆∞·ª£ng & R·ªßi ro")
c1, c2, c3 = st.columns(3)

with c1:
    late = df_f["LateShipment"].value_counts().rename({0:"ƒê√∫ng h·∫°n",1:"Tr·ªÖ"}).reset_index()
    late.columns = ["Tr·∫°ng th√°i","S·ªë ƒë∆°n"]
    fig6 = px.pie(late, names="Tr·∫°ng th√°i", values="S·ªë ƒë∆°n", title="‚è≥ T·ª∑ l·ªá Giao h√†ng tr·ªÖ")
    st.plotly_chart(fig6, use_container_width=True)
    st.caption("T·ª∑ l·ªá ƒë∆°n h√†ng giao tr·ªÖ so v·ªõi ƒë√∫ng h·∫°n.")

with c2:
    rej = df_f.groupby("ProductID")["RejectedQty"].sum().reset_index()
    rej = rej[rej["RejectedQty"]>0]
    fig7 = px.bar(rej, x="ProductID", y="RejectedQty",
                  title="‚ùå S·ªë l∆∞·ª£ng B·ªã t·ª´ ch·ªëi theo S·∫£n ph·∫©m")
    st.plotly_chart(fig7, use_container_width=True)
    st.caption("S·∫£n ph·∫©m n√†o b·ªã tr·∫£ l·∫°i do l·ªói ch·∫•t l∆∞·ª£ng.")

with c3:
    th = poh_f["TotalDue"].quantile(0.75)
    hc = poh_f[poh_f["TotalDue"]>th].groupby(poh_f["OrderDate"].dt.to_period("M"))["TotalDue"].sum().reset_index()
    hc["OrderDate"] = hc["OrderDate"].astype(str)
    fig8 = px.line(hc, x="OrderDate", y="TotalDue",
                   title="üí∏ Chi ph√≠ ƒê∆°n h√†ng Cao (Q3) theo Th√°ng")
    st.plotly_chart(fig8, use_container_width=True)
    st.caption("Theo d√µi chi ph√≠ c√°c ƒë∆°n h√†ng n·∫±m trong top 25% cao nh·∫•t.")

st.markdown("---")

# --- Ph·∫ßn 5: T·ªìn kho & Hi·ªáu su·∫•t Vendor ---
st.subheader("üì¶ T·ªìn kho & Hi·ªáu su·∫•t Nh√† cung c·∫•p")
d1, d2 = st.columns(2)

with d1:
    inv = df_f.groupby("ProductID")["StockedQty"].sum().reset_index()
    used = data["TH"].query("TransactionType=='W'")\
        .groupby("ProductID")["Quantity"].sum().reindex(inv["ProductID"], fill_value=0).values
    inv["T·ªìn kho th·ª±c"] = inv["StockedQty"] - used
    fig9 = px.bar(inv, x="ProductID", y="T·ªìn kho th·ª±c",
                  title="üì¶ T·ªìn kho Th·ª±c t·∫ø theo S·∫£n ph·∫©m")
    st.plotly_chart(fig9, use_container_width=True)
    st.caption("T·ªìn kho kh·∫£ d·ª•ng = StockedQty ‚àí Xu·∫•t kho ƒë·ªÉ s·∫£n xu·∫•t.")

with d2:
    vp = df_f.groupby("Nh√† cung c·∫•p").agg({
        "LateShipment":"mean","RejectedQty":"mean","SubTotal":"sum"
    }).reset_index()
    vp["ƒêi·ªÉm hi·ªáu su·∫•t"] = (
        (1-vp["LateShipment"])*0.4 +
        (1 - vp["RejectedQty"]/vp["RejectedQty"].max())*0.4 +
        (1 - vp["SubTotal"]/vp["SubTotal"].max())*0.2
    )
    fig10 = px.bar(vp, x="ƒêi·ªÉm hi·ªáu su·∫•t", y="Nh√† cung c·∫•p", orientation="h",
                   title="‚≠ê ƒêi·ªÉm Hi·ªáu su·∫•t Nh√† cung c·∫•p")
    st.plotly_chart(fig10, use_container_width=True)
    st.caption("K·∫øt h·ª£p tr·ªÖ h√†ng, t·ª´ ch·ªëi, chi ph√≠ ƒë·ªÉ ƒë√°nh gi√° t·ªïng quan.")

st.markdown("---")

# --- Ph·∫ßn 6: Bi·ªÉu ƒë·ªì M·ªü r·ªông ---
st.subheader("üÜï Bi·ªÉu ƒë·ªì M·ªü r·ªông")

# Scatter: Chi ph√≠ vs T·ªâ l·ªá tr·ªÖ h√†ng theo vendor
scat = vp.copy()
scat["T·ªâ l·ªá tr·ªÖ"] = vp["LateShipment"]
fig11 = px.scatter(scat, x="SubTotal", y="T·ªâ l·ªá tr·ªÖ", color="Nh√† cung c·∫•p",
                   title="üîç Chi ph√≠ vs T·ªâ l·ªá Giao h√†ng tr·ªÖ")
fig11.update_layout(xaxis_title="T·ªïng chi ph√≠ Vendor", yaxis_title="T·ªâ l·ªá tr·ªÖ (%)")
st.plotly_chart(fig11, use_container_width=True)
st.caption("Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa chi ph√≠ v√† t·ªâ l·ªá giao tr·ªÖ.")

# AverageLeadTime theo vendor
alt = df_f.groupby("Nh√† cung c·∫•p")["AverageLeadTime"].mean().reset_index()
fig12 = px.bar(alt, x="AverageLeadTime", y="Nh√† cung c·∫•p", orientation="h",
               title="‚è±Ô∏è Th·ªùi gian giao trung b√¨nh theo Nh√† cung c·∫•p")
st.plotly_chart(fig12, use_container_width=True)
st.caption("Vendor n√†o c√≥ th·ªùi gian giao h√†ng trung b√¨nh ng·∫Øn nh·∫•t.")

# --- Ph·∫ßn 7: Theo d√µi t·ªìn kho theo th·ªùi gian th·ª±c ---
st.subheader("üì° Theo d√µi t·ªìn kho theo th·ªùi gian th·ª±c")

# L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ trong TransactionHistory
product_ids = data["TH"]["ProductID"].dropna().unique()
selected_prods = st.multiselect(
    "Ch·ªçn S·∫£n ph·∫©m ƒë·ªÉ theo d√µi t·ªìn kho", 
    options=product_ids, 
    default=product_ids[:3]
)

if selected_prods:
    # L·∫•y l·ªãch s·ª≠ giao d·ªãch c·ªßa c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
    th = data["TH"].copy()
    # Chuy·ªÉn ƒë·ªïi TransactionDate v·ªõi format h·ªó tr·ª£ millisecond
    th["TransactionDate"] = pd.to_datetime(th["TransactionDate"], errors='coerce', format='mixed')
    th = th.dropna(subset=["TransactionDate"])  # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaT
    th["TransactionDate"] = th["TransactionDate"].dt.date
    th = th[th["ProductID"].isin(selected_prods)]
    
    # Chuy·ªÉn TransactionType: P (nh·∫≠p) +, W (xu·∫•t) -
    th["Delta"] = th.apply(lambda r: -r["Quantity"] if r["TransactionType"]=="W" else +r["Quantity"], axis=1)
    
    # T√≠nh t·ªìn kho t√≠ch l≈©y theo ng√†y v√† theo s·∫£n ph·∫©m
    th_group = th.groupby(["ProductID", "TransactionDate"])["Delta"].sum().reset_index()
    th_group = th_group.sort_values(["ProductID", "TransactionDate"])
    th_group["Inventory"] = th_group.groupby("ProductID")["Delta"].cumsum()
    
    # V·∫Ω line chart cho m·ªói s·∫£n ph·∫©m
    fig_rt = px.line(
        th_group, 
        x="TransactionDate", 
        y="Inventory", 
        color="ProductID",
        title="üìà T·ªìn kho theo th·ªùi gian th·ª±c"
    )
    fig_rt.update_layout(
        xaxis_title="Ng√†y",
        yaxis_title="T·ªìn kho (s·ªë l∆∞·ª£ng)"
    )
    st.plotly_chart(fig_rt, use_container_width=True)
    st.caption("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán m·ª©c t·ªìn kho t√≠ch l≈©y theo ng√†y cho s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn.")
else:
    st.info("Ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem t·ªìn kho th·ªùi gian th·ª±c.")
    
# --- Ph·∫ßn 8: Ph√¢n t√≠ch Th√¥ng minh b·∫±ng AI ---
st.subheader("üß† Ph√¢n t√≠ch Th√¥ng minh b·∫±ng AI")

# C√†i ƒë·∫∑t th∆∞ vi·ªán b·ªï sung n·∫øu c·∫ßn
try:
    from prophet import Prophet
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
except ImportError:
    st.warning("‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán prophet v√† scikit-learn. Ch·∫°y: pip install prophet scikit-learn")
    st.stop()

# 8.1 D·ª± ƒëo√°n t·ªìn kho
st.markdown("### üìà D·ª± ƒëo√°n T·ªìn kho trong 30 ng√†y t·ªõi")
ai_prods = st.multiselect(
    "Ch·ªçn S·∫£n ph·∫©m ƒë·ªÉ d·ª± ƒëo√°n t·ªìn kho", 
    options=product_ids, 
    default=product_ids[:2],
    key="ai_prods"
)

if ai_prods:
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho Prophet
    th = data["TH"].copy()
    th["TransactionDate"] = pd.to_datetime(th["TransactionDate"], errors='coerce', format='mixed')
    th = th.dropna(subset=["TransactionDate"])
    th["TransactionDate"] = th["TransactionDate"].dt.date
    th = th[th["ProductID"].isin(ai_prods)]
    th["Delta"] = th.apply(lambda r: r["Quantity"] if r["TransactionType"]=="S" else -r["Quantity"], axis=1)
    
    # T√≠nh t·ªìn kho t√≠ch l≈©y theo ng√†y
    th_group = th.groupby(["ProductID", "TransactionDate"])["Delta"].sum().reset_index()
    th_group = th_group.sort_values(["ProductID", "TransactionDate"])
    th_group["Inventory"] = th_group.groupby("ProductID")["Delta"].cumsum()
    
    # D·ª± ƒëo√°n cho t·ª´ng s·∫£n ph·∫©m
    figs = []
    for prod in ai_prods:
        df_prophet = th_group[th_group["ProductID"] == prod][["TransactionDate", "Inventory"]]
        df_prophet = df_prophet.rename(columns={"TransactionDate": "ds", "Inventory": "y"})
        df_prophet["ds"] = pd.to_datetime(df_prophet["ds"])
        
        # Kh·ªüi t·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh Prophet
        model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=True)
        model.fit(df_prophet)
        
        # D·ª± ƒëo√°n 30 ng√†y t·ªõi
        future = model.make_future_dataframe(periods=30)
        forecast = model.predict(future)
        
        # V·∫Ω bi·ªÉu ƒë·ªì
        fig_forecast = go.Figure()
        fig_forecast.add_trace(go.Scatter(
            x=df_prophet["ds"], y=df_prophet["y"], mode="lines", name=f"Historical (Product {prod})"
        ))
        fig_forecast.add_trace(go.Scatter(
            x=forecast["ds"], y=forecast["yhat"], mode="lines", name=f"Forecast (Product {prod})",
            line=dict(dash="dash")
        ))
        fig_forecast.update_layout(
            title=f"D·ª± ƒëo√°n T·ªìn kho cho Product {prod}",
            xaxis_title="Ng√†y", yaxis_title="T·ªìn kho",
            legend=dict(x=0, y=1)
        )
        figs.append(fig_forecast)
    
    # Hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
    for fig in figs:
        st.plotly_chart(fig, use_container_width=True)
    st.caption("D·ª± ƒëo√°n t·ªìn kho d·ª±a tr√™n m√¥ h√¨nh Prophet, s·ª≠ d·ª•ng d·ªØ li·ªáu l·ªãch s·ª≠ giao d·ªãch.")

# 8.2 Ph√¢n lo·∫°i Nh√† cung c·∫•p
st.markdown("### üèÖ ƒê√°nh gi√° Nh√† cung c·∫•p b·∫±ng AI")
if st.button("Ph√¢n lo·∫°i Nh√† cung c·∫•p", key="classify_vendors"):
    # Chu·∫©n b·ªã d·ªØ li·ªáu
    vp = df_f.groupby("Nh√† cung c·∫•p").agg({
        "LateShipment": "mean",
        "RejectedQty": "mean",
        "SubTotal": "sum"
    }).reset_index()
    
    # T·∫°o nh√£n gi·∫£ (v√≠ d·ª•: nh√† cung c·∫•p t·ªët n·∫øu LateShipment < 0.2 v√† RejectedQty th·∫•p)
    vp["Label"] = (vp["LateShipment"] < 0.2) & (vp["RejectedQty"] < vp["RejectedQty"].quantile(0.5))
    vp["Label"] = vp["Label"].map({True: "T·ªët", False: "C·∫ßn c·∫£i thi·ªán"})
    
    # Chu·∫©n b·ªã features v√† labels
    X = vp[["LateShipment", "RejectedQty", "SubTotal"]]
    y = vp["Label"]
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh RandomForest
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_scaled, y)
    
    # D·ª± ƒëo√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    vp["Predicted_Label"] = clf.predict(X_scaled)
    fig_clf = px.scatter(
        vp, x="LateShipment", y="RejectedQty", color="Predicted_Label",
        size="SubTotal", hover_data=["Nh√† cung c·∫•p"],
        title="Ph√¢n lo·∫°i Nh√† cung c·∫•p: T·ªët vs C·∫ßn c·∫£i thi·ªán"
    )
    fig_clf.update_layout(
        xaxis_title="T·ª∑ l·ªá Giao tr·ªÖ", yaxis_title="S·ªë l∆∞·ª£ng T·ª´ ch·ªëi",
        legend_title="D·ª± ƒëo√°n"
    )
    st.plotly_chart(fig_clf, use_container_width=True)
    st.caption("Ph√¢n lo·∫°i nh√† cung c·∫•p b·∫±ng RandomForest d·ª±a tr√™n t·ª∑ l·ªá giao tr·ªÖ, t·ª´ ch·ªëi, v√† chi ph√≠.")
    
    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
    st.write("K·∫øt qu·∫£ ph√¢n lo·∫°i Nh√† cung c·∫•p:")
    st.dataframe(vp[["Nh√† cung c·∫•p", "LateShipment", "RejectedQty", "SubTotal", "Predicted_Label"]])

# 8.3 ƒê·ªÅ xu·∫•t T·ªëi ∆∞u h√≥a
st.markdown("### üí° ƒê·ªÅ xu·∫•t T·ªëi ∆∞u h√≥a")
if st.button("T·∫°o ƒê·ªÅ xu·∫•t", key="recommendations"):
    recommendations = []
    
    # ƒê·ªÅ xu·∫•t gi·∫£m t·ªìn kho d∆∞ th·ª´a
    inv = df_f.groupby("ProductID")["StockedQty"].sum().reset_index()
    used = data["TH"].query("TransactionType=='W'")\
        .groupby("ProductID")["Quantity"].sum().reindex(inv["ProductID"], fill_value=0).values
    inv["T·ªìn kho th·ª±c"] = inv["StockedQty"] - used
    high_inv = inv[inv["T·ªìn kho th·ª±c"] > inv["T·ªìn kho th·ª±c"].quantile(0.75)]
    for _, row in high_inv.iterrows():
        recommendations.append(
            f"Gi·∫£m ƒë·∫∑t h√†ng cho Product {row['ProductID']}: T·ªìn kho th·ª±c ({row['T·ªìn kho th·ª±c']:.0f}) v∆∞·ª£t m·ª©c trung b√¨nh."
        )
    
    # ƒê·ªÅ xu·∫•t chuy·ªÉn nh√† cung c·∫•p k√©m hi·ªáu qu·∫£
    vp = df_f.groupby("Nh√† cung c·∫•p").agg({
        "LateShipment": "mean",
        "RejectedQty": "mean"
    }).reset_index()
    low_perf = vp[(vp["LateShipment"] > 0.3) | (vp["RejectedQty"] > vp["RejectedQty"].quantile(0.75))]
    for _, row in low_perf.iterrows():
        recommendations.append(
            f"Xem x√©t thay th·∫ø Nh√† cung c·∫•p {row['Nh√† cung c·∫•p']}: T·ª∑ l·ªá giao tr·ªÖ ({row['LateShipment']:.2%}), "
            f"S·ªë l∆∞·ª£ng t·ª´ ch·ªëi ({row['RejectedQty']:.0f})."
        )
    
    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t
    if recommendations:
        st.write("**ƒê·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a chu·ªói cung ·ª©ng:**")
        for rec in recommendations:
            st.markdown(f"- {rec}")
    else:
        st.info("Kh√¥ng c√≥ ƒë·ªÅ xu·∫•t n√†o v√†o l√∫c n√†y.")
    st.caption("C√°c ƒë·ªÅ xu·∫•t ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n ph√¢n t√≠ch t·ªìn kho v√† hi·ªáu su·∫•t nh√† cung c·∫•p.")

# Footer
st.markdown("---")
st.markdown("üöÄ Built with Streamlit - Nh√≥m 2 - HTTTQL | D·ªØ li·ªáu: CompanyX.xlsx")